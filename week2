    #get symbol array of Symbol
    def FasterSymbolArray(Genome, symbol):
    array = {}
    n = len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]

    # look at the first half of Genome to compute first array value
    array[0] = PatternCount(symbol, Genome[0:n//2])

    for i in range(1, n):
        # start by setting the current array value equal to the previous array value
        array[i] = array[i-1]

        # the current array value can differ from the previous array value by at most 1
        if ExtendedGenome[i-1] == symbol:
            array[i] = array[i]-1
        if ExtendedGenome[i+(n//2)-1] == symbol:
            array[i] = array[i]+1
    return array

    #get skew array
    def SkewArray(Genome):
        Skew = [0]
        for i in range(len(Genome)):
            if Genome[i] == 'C':
                Skew.append(Skew[i] - 1)
            elif Genome[i] == 'G':
                Skew.append(Skew[i] + 1)
            else:
                Skew.append(Skew[i])
        return Skew

    #integers that minimize skew for genome
    def MinimumSkew(Genome):
        positions = [] # output variable
        array = SkewArray(Genome)
        m = min(array) 
        for i in range(len(array)):
            if array[i] == m:
                positions.append(i)
        return positions

    #get Hamming Distance
    def HammingDistance(p, q):
        Ham = 0
        for i in range(len(p)): 
            if p[i] != q[i]:
                Ham += 1
        return Ham

#find count matrix of Motifs
def Count(Motifs):
    count = {} # initializing the count dictionary
    k = len(Motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(0)
    t = len(Motifs)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1
    return count

#get profile matrix as dictionary
def Profile(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    profile = {}
    # insert your code here
    count = Count(Motifs)
    for nt in "AGTC":
        profile[nt] = count[nt]
    for i in profile:
        for j in range(k):
            profile[i][j] = profile[i][j]/t
    return profile

#get consensus strings of Motifs
def Consensus(Motifs):
    # insert your code here
    k = len(Motifs[0])
    count = Count(Motifs)
    consensus = ""
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m:
                m = count[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol
    return consensus

#get score of k-mers
def Score(Motifs):
    consensus = Consensus(Motifs)
    count = 0 
    for motif in Motifs:
        for index in range(len(motif)):
            if motif[index] != consensus[index]:
                count += 1
    return count

#get probability that Profile finds specific sequence
def Pr(Text, Profile):
    # insert your code here
    running_product = 1
    for index, nucleotide in enumerate(Text):
        running_product *= Profile[nucleotide][index]
    return running_product

#find k-mer most probable from Profile
def ProfileMostProbableKmer(text, k, profile):
    maxi = -1
    x = 0
    for i in range(len(text)-k+1):
        out = Pr(text[i:i+k], profile)
        if out > maxi:
            maxi = out
            x = i
    ans = text[x:x+k]
    return ans

def GreedyMotifSearch(Dna, k, t):
    # type your GreedyMotifSearch code here.
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for m in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][m:m+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs

